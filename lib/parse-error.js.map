{"version":3,"names":["toParseErrorConstructor","toMessage","properties","constructor","loc","details","instantiate","SyntaxError","clone","overrides","Position","line","column","index","value","enumerable","message","get","set","Object","defineProperty","pos","reflect","missingPlugin","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","keys","template","rest","code","ParseErrorCode","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors"],"sources":["../src/parse-error.ts"],"sourcesContent":["import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n"],"mappings":"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"}