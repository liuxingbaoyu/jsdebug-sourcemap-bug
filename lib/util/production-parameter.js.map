{"version":3,"names":["PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","enter","flags","push","exit","pop","currentFlags","length","hasAwait","hasYield","hasReturn","hasIn","functionFlags","isAsync","isGenerator"],"sources":["../../src/util/production-parameter.ts"],"sourcesContent":["export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return ((isAsync ? PARAM_AWAIT : 0) |\n    (isGenerator ? PARAM_YIELD : 0)) as ParamKind;\n}\n"],"mappings":";;;;;;;AAAO,MACLA,KAAK,GAAG,MADH;AAAA,MAGLC,WAAW,GAAG,MAHT;AAAA,MAKLC,WAAW,GAAG,MALT;AAAA,MAOLC,YAAY,GAAG,MAPV;AAAA,MAQLC,QAAQ,GAAG,MARN;;;;;;;AA0CQ,MAAMC,0BAAN,CAAiC;EAC9CC,MAAM,GAAkB,EAAlB;;EACNC,KAAK,CAACC,KAAD,EAAgB;IACnB,KAAKF,MAAL,CAAYG,IAAZ,CAAiBD,KAAjB;EACD;;EAEDE,IAAI,GAAG;IACL,KAAKJ,MAAL,CAAYK,GAAZ;EACD;;EAEDC,YAAY,GAAW;IACrB,OAAO,KAAKN,MAAL,CAAY,KAAKA,MAAL,CAAYO,MAAZ,GAAqB,CAAjC,CAAP;EACD;;EAEW,IAARC,QAAQ,GAAY;IACtB,OAAO,CAAC,KAAKF,YAAL,KAAsBV,WAAvB,IAAsC,CAA7C;EACD;;EAEW,IAARa,QAAQ,GAAY;IACtB,OAAO,CAAC,KAAKH,YAAL,KAAsBX,WAAvB,IAAsC,CAA7C;EACD;;EAEY,IAATe,SAAS,GAAY;IACvB,OAAO,CAAC,KAAKJ,YAAL,KAAsBT,YAAvB,IAAuC,CAA9C;EACD;;EAEQ,IAALc,KAAK,GAAY;IACnB,OAAO,CAAC,KAAKL,YAAL,KAAsBR,QAAvB,IAAmC,CAA1C;EACD;;AA5B6C;;;;AA+BzC,SAASc,aAAT,CACLC,OADK,EAELC,WAFK,EAGM;EACX,OAAQ,CAACD,OAAO,GAAGjB,WAAH,GAAiB,CAAzB,KACLkB,WAAW,GAAGnB,WAAH,GAAiB,CADvB,CAAR;AAED"}