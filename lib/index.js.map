{"version":3,"names":["parse","input","options","sourceType","parser","getParser","ast","sawUnambiguousESM","ambiguousScriptDifferentAst","program","moduleError","parseExpression","strictMode","state","strict","getExpression","generateExportedTokenTypes","internalTokenTypes","tokenTypes","typeName","Object","keys","getExportedToken","tokTypes","cls","Parser","plugins","validatePlugins","getParserClass","parserClassCache","pluginsFromOptions","pluginList","mixinPluginNames","filter","name","hasPlugin","key","join","plugin","mixinPlugins"],"sources":["../src/index.ts"],"sourcesContent":["import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport {\n  ExportedTokenType,\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"mappings":"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"}