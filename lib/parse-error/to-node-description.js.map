{"version":3,"names":["NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String"],"sources":["../../src/parse-error/to-node-description.ts"],"sourcesContent":["const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n"],"mappings":";;;;;;AAAA,MAAMA,gBAAgB,GAAG;EACvBC,YAAY,EAAE,6BADS;EAEvBC,oBAAoB,EAAE,uBAFC;EAGvBC,iBAAiB,EAAE,uBAHI;EAIvBC,uBAAuB,EAAE,2BAJF;EAKvBC,qBAAqB,EAAE,wBALA;EAMvBC,WAAW,EAAE,cANU;EAOvBC,cAAc,EAAE,kBAPO;EAQvBC,cAAc,EAAE,kBARO;EASvBC,YAAY,EAAE,UATS;EAUvBC,gBAAgB,EAAE,yBAVK;EAWvBC,UAAU,EAAE,YAXW;EAYvBC,eAAe,EAAE,kBAZM;EAavBC,sBAAsB,EAAE,0BAbD;EAcvBC,wBAAwB,EAAE,4BAdH;EAevBC,aAAa,EAAE,8BAfQ;EAgBvBC,uBAAuB,EAAE,0BAhBF;EAiBvBC,WAAW,EAAE,cAjBU;EAkBvBC,gBAAgB,EAAE;IAChBC,IAAI,EAAE,kBADU;IAEhBC,KAAK,EAAE;EAFS,CAlBK;EAsBvBC,kBAAkB,EAAE,sBAtBG;EAuBvBC,eAAe,EAAE;AAvBM,CAAzB;;AA0CA,MAAMC,iBAAiB,GAAG,CAAC;EAAEC,IAAF;EAAQC;AAAR,CAAD,KACxBD,IAAI,KAAK,kBAAT,GACIxB,gBAAgB,CAACkB,gBAAjB,CAAkCQ,MAAM,CAACD,MAAD,CAAxC,CADJ,GAEIzB,gBAAgB,CAACwB,IAAD,CAHtB;;eAKeD,iB"}